"""Move stattrak to SkinCondition and add stattrak_available to Skin

Revision ID: 55c4473bd7cb
Revises: 8cf3b5dc6a51
Create Date: 2024-08-16 17:19:54.143019

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column, select, update, and_, expression


# revision identifiers, used by Alembic.
revision = '55c4473bd7cb'
down_revision = '8cf3b5dc6a51'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('skin_conditions', schema=None) as batch_op:
        batch_op.add_column(sa.Column('stattrak', sa.Boolean(), nullable=False, server_default=expression.false()))

    with op.batch_alter_table('skins', schema=None) as batch_op:
        batch_op.add_column(sa.Column('stattrak_available', sa.Boolean(), nullable=False, server_default=expression.false()))
        batch_op.add_column(sa.Column('image_name', sa.String(length=64), nullable=True))

    connection = op.get_bind()
    
    skins_table = table(
        'skins',
        column('id', sa.Integer),
        column('name', sa.String),
        column('stattrak', sa.Boolean),
        column('stattrak_available', sa.Boolean)
    )
    
    skin_conditions_table = table(
        'skin_conditions',
        column('id', sa.Integer),
        column('skin_id', sa.Integer),
        column('stattrak', sa.Boolean)
    )

    # Step 1: Set stattrak field in skin_conditions
    connection.execute(
        skin_conditions_table.update().values(
            stattrak=(
                select(skins_table.c.stattrak)
                .where(skin_conditions_table.c.skin_id == skins_table.c.id)
                .scalar_subquery()
            )
        )
    )

    # Step 2: Set stattrak_available in Skin table
    connection.execute(
        skins_table.update().values(
            stattrak_available=True
        ).where(
            skins_table.c.name.in_(
                select(skins_table.c.name)
                .where(skins_table.c.stattrak == True)
            )
        )
    )

    # Step 3: Change skin_id of stattrak SkinCondition entries, and delete duplicate Skin entries (the stattrak ones)
    
    duplicate_skins = connection.execute(
        select(skins_table.c.id, skins_table.c.name)
        .where(skins_table.c.stattrak == True)
    ).fetchall()

    for skin in duplicate_skins:
        stattrak_skin_id = skin[0]
        skin_name = skin[1]

        # get id of the non stattrak skin entry
        non_stattrak_skin_id = connection.execute(
            select(skins_table.c.id).
            where(and_(
                skins_table.c.name == skin_name,
                skins_table.c.stattrak == False))
        ).fetchone()[0]

        # change skin_id of SkinCondition entry to the Skin nonstattrak entry
        connection.execute(
            skin_conditions_table.update()
            .where(skin_conditions_table.c.skin_id == stattrak_skin_id)
            .values(skin_id = non_stattrak_skin_id)
        )

        # delete stattrak entry
        connection.execute(
            skins_table.delete().where(skins_table.c.id == stattrak_skin_id)
        )

    with op.batch_alter_table('skins', schema=None) as batch_op:
        batch_op.drop_column('stattrak')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('skins', schema=None) as batch_op:
        batch_op.add_column(sa.Column('stattrak', sa.BOOLEAN(), nullable=True))

    connection = op.get_bind()
    
    skins_table = table(
        'skins',
        column('id', sa.Integer),
        column('name', sa.String),
        column('stattrak', sa.Boolean)
    )
    
    skin_conditions_table = table(
        'skin_conditions',
        column('id', sa.Integer),
        column('skin_id', sa.Integer),
        column('stattrak', sa.Boolean)
    )
    
    # Step 1: Re-add the stattrak Skin entries that were deleted in the upgrade
    duplicate_skins = connection.execute(
        select([skins_table.c.id, skins_table.c.name])
        .distinct()
        .where(
            skins_table.c.id == skin_conditions_table.c.skin_id,
            skin_conditions_table.c.stattrak == True
        )
    ).fetchall()

    for skin in duplicate_skins:
        original_skin_id = skin[0]
        skin_name = skin[1]

        # Add back the stattrak entry
        new_skin_id = connection.execute(
            skins_table.insert().values(
                name=skin_name,
                stattrak=True,
                stattrak_available=False  # This field will be removed, so setting to default
            ).returning(skins_table.c.id)
        ).fetchone()[0]

        # Update the SkinCondition entries to point back to the new stattrak Skin
        connection.execute(
            skin_conditions_table.update()
            .where(
                skin_conditions_table.c.skin_id == original_skin_id,
                skin_conditions_table.c.stattrak == True
            )
            .values(skin_id=new_skin_id)
        )
    
    # Step 2: Copy stattrak values from SkinCondition back to Skin
    connection.execute(
        skins_table.update()
        .values(stattrak=select([skin_conditions_table.c.stattrak])
                .where(skin_conditions_table.c.skin_id == skins_table.c.id)
                .limit(1)
        )
    )

    # Step 3: Drop the stattrak column from SkinCondition table
    with op.batch_alter_table('skin_conditions', schema=None) as batch_op:
        batch_op.drop_column('stattrak')

    # Step 4: Remove the stattrak_available and image_name columns from skins
    with op.batch_alter_table('skins', schema=None) as batch_op:
        batch_op.drop_column('image_name')
        batch_op.drop_column('stattrak_available')

    # ### end Alembic commands ###
